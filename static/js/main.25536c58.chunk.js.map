{"version":3,"sources":["features/table/tableSlice.js","features/table/Table.js","features/table/Button.js","features/table/Modal.js","index.js"],"names":["fetchData","createAsyncThunk","num","a","getState","requestId","signal","console","log","table","loading","currentRequestId","crossfetch","method","response","ok","status","json","body","results","rows","map","row","id","value","name","title","first","last","gender","pic","picture","large","error","Error","statusText","tableSlice","createSlice","initialState","undefined","reducers","deleteRow","state","action","filter","payload","extraReducers","pending","meta","fulfilled","concat","rejected","actions","Column","mapDispatch","connect","location","useLocation","rowKey","dataSource","key","dataIndex","render","text","to","pathname","backgroud","src","alt","record","type","onClick","fetch","DataModal","useState","visible","setVisible","history","useHistory","useParams","useSelector","find","back","e","goBack","onOk","onCancel","reducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","persistor","persistStore","ReactDom","locale","zhCN","className","path","Table","Modal","document","getElementById"],"mappings":"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","file":"static/js/main.25536c58.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport crossfetch from \"cross-fetch\";\r\n\r\nexport const fetchData = createAsyncThunk(\r\n  \"table/fetch\",\r\n  async (num, { getState, requestId, signal }) => {\r\n    console.log(\"payload callback:\" + num);\r\n    const { loading, currentRequestId } = getState().table;\r\n    if (loading === \"pending\" && currentRequestId === requestId) {\r\n      try {\r\n        const response = await crossfetch(\r\n          `https://api.randomuser.me/?nat=us&gender=female&results=${num}`,\r\n          {\r\n            signal: signal,\r\n            method: \"GET\"\r\n          }\r\n        );\r\n        if (response.ok || (response.status >= 200 && response.status < 300)) {\r\n          const body = await response.json();\r\n          console.log(body);\r\n          const { results } = body;\r\n          let rows = results.map(row => {\r\n            return {\r\n              id: row.id.value,\r\n              name: row.name.title + \" \" + row.name.first + \" \" + row.name.last,\r\n              gender: row.gender,\r\n              pic: row.picture.large\r\n            };\r\n          });\r\n          return rows;\r\n        } else {\r\n          let error = new Error(response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      } catch (e) {\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst tableSlice = createSlice({\r\n  name: \"table\",\r\n  initialState: {\r\n    rows: [],\r\n    loading: \"idle\",\r\n    currentRequestId: undefined,\r\n    error: null\r\n  },\r\n  reducers: {\r\n    deleteRow(state, action) {\r\n      state.rows = state.rows.filter(row => row.id !== action.payload);\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [fetchData.pending]: (state, action) => {\r\n      state.loading = \"pending\";\r\n      state.currentRequestId = action.meta.requestId;\r\n    },\r\n    [fetchData.fulfilled]: (state, action) => {\r\n      const { requestId } = action.meta;\r\n      console.log(\"fulfilled:\" + requestId);\r\n      if (state.loading === \"pending\" && state.currentRequestId === requestId) {\r\n        state.loading = \"idle\";\r\n        state.currentRequestId = undefined;\r\n        state.rows = state.rows.concat(action.payload);\r\n      }\r\n    },\r\n    [fetchData.rejected]: (state, action) => {\r\n        if(action.payload){//reject with vaule\r\n            state.error = action.payload;\r\n        }else{\r\n            state.error = action.error;\r\n        }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { deleteRow } = tableSlice.actions;\r\nexport default tableSlice.reducer;\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {deleteRow} from './tableSlice'\r\nimport {Link, useLocation} from 'react-router-dom'\r\nimport {Table, Button} from 'antd'\r\nconst {Column} = Table;\r\n\r\nconst DataTable = ({ rows, deleteRow }) => {\r\n    const location = useLocation();\r\n    return (\r\n        <Table rowKey = 'id' dataSource = {rows}>\r\n            <Column key = 'id' title = 'id' dataIndex = 'id' render = {\r\n                (text) => (\r\n                    <Link to={{\r\n                            pathname: `/test/${text}`,\r\n                            state: {backgroud: location}\r\n                            }}\r\n                    >\r\n                        {text}\r\n                    </Link>\r\n                )\r\n            }/>\r\n            <Column key = 'name' title = 'name' dataIndex = 'name'/>\r\n            <Column key = 'gender' title = 'gender' dataIndex = 'gender' />\r\n            <Column key = 'pic' title = 'pic' dataIndex = 'pic' render = {\r\n                (text) => (\r\n                    <img src={text} alt=\"\" />\r\n                )\r\n            }/>\r\n            <Column key = 'action' title = 'action' render = {\r\n                (text, record) => (\r\n                    <Button type = 'primary' onClick={() => deleteRow(record.id)}>delete</Button>\r\n                )\r\n            }/>\r\n        </Table>\r\n    );\r\n}\r\n\r\nconst mapState = state => ({ rows: state.table.rows });\r\nconst mapDispatch = {deleteRow}\r\nexport default connect(\r\n    mapState,\r\n    mapDispatch\r\n)(DataTable)","import React from \"react\";\r\nimport { fetchData } from \"./tableSlice\";\r\nimport { connect } from \"react-redux\";\r\nimport {Button} from 'antd'\r\n\r\nconst FetchButton = ({ fetch }) => {\r\n  return (\r\n    <Button type = 'primary'\r\n      onClick={ () => {\r\n                       const resultAction = fetch(1);\r\n                    //    setTimeout(() => resultAction.abort(), 1000);\r\n                     }}\r\n    >\r\n      fetch\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst mapDispatch = { fetch: fetchData };\r\nexport default connect(null, mapDispatch)(FetchButton);\r\n","import React, { useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\nimport {Modal} from 'antd';\r\n\r\nconst DataModal = () => {\r\n    const [visible, setVisible] = useState(true);\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n    const rows = useSelector(state => state.table.rows);\r\n    const row = rows.find(row => row.id === id);\r\n    if (!row) {\r\n      return null;\r\n    }\r\n    const back = e => {\r\n        setVisible(false);\r\n        history.goBack();\r\n    }\r\n    return (\r\n        <Modal\r\n          title={`${row.id}-${row.name}-${row.gender}`}\r\n          visible= {visible}\r\n          onOk = {back}\r\n          onCancel = {back}\r\n        >\r\n          <p>\r\n          <img\r\n              src={row.pic}\r\n              alt=\"\"\r\n            />\r\n            </p>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default DataModal;","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport {Provider} from 'react-redux'\r\nimport {combineReducers} from 'redux'\r\nimport {createLogger} from 'redux-logger'\r\nimport table from './features/table/tableSlice'\r\nimport Table from './features/table/Table'\r\nimport FetchButton from './features/table/Button'\r\n// import './main.css'\r\nimport './index.css'\r\nimport {persistStore, persistReducer} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {PersistGate} from 'redux-persist/integration/react'\r\nimport {BrowserRouter as Router, Switch, Route, useLocation} from 'react-router-dom'\r\nimport Modal from './features/table/Modal'\r\nimport {ConfigProvider} from 'antd'\r\n// 由于 antd 组件的默认文案是英文，所以需要修改为中文\r\nimport zhCN from 'antd/es/locale/zh_CN';\r\n\r\nconst reducer = combineReducers({\r\n  table\r\n})\r\nconst middleware = []\r\nif(process.env.NODE_ENV !== 'production'){\r\n  middleware.push(createLogger())\r\n}\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, reducer)\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [...getDefaultMiddleware(), ...middleware]\r\n})\r\n\r\nconst App = () => {\r\n  const location = useLocation();\r\n  const backgroud = location.state && location.state.backgroud;\r\n        return (\r\n          <ConfigProvider locale={zhCN}>\r\n            <div className=\"App\">\r\n              <Switch location={backgroud || location}>\r\n                <Route path=\"/test\">\r\n                  <Table />\r\n                  <FetchButton />\r\n                </Route>\r\n              </Switch>\r\n              {backgroud && (\r\n                <Route path=\"/test/:id\">\r\n                  <Modal />\r\n                </Route>\r\n              )}\r\n            </div>\r\n          </ConfigProvider>\r\n        );\r\n}\r\n\r\nconst persistor = persistStore(store)\r\nReactDom.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <Router>\r\n        <App/>\r\n      </Router>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}