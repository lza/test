{"version":3,"sources":["features/table/tableSlice.js","features/table/Table.js","features/table/Button.js","index.js"],"names":["tableSlice","createSlice","name","initialState","reducers","addRows","state","action","concat","payload","deleteRow","filter","row","id","actions","mapDispatch","connect","rows","map","key","gender","src","pic","alt","onClick","checkStatus","response","ok","status","error","Error","statusText","parseJson","json","crossfetch","method","then","body","console","log","results","value","title","first","last","picture","large","catch","e","reducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","persistor","persistStore","ReactDom","render","loading","document","getElementById"],"mappings":"8NAEMA,G,MAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,GACdC,SAAU,CACNC,QADM,SACEC,EAAOC,GACX,OAAOD,EAAME,OAAOD,EAAOE,UAE/BC,UAJM,SAIIJ,EAAOC,GACb,OAAOD,EAAMK,QAAO,SAAAC,GAAG,OAAIA,EAAIC,KAAON,EAAOE,gB,EAKrBT,EAAWc,QAAjCT,E,EAAAA,QAASK,E,EAAAA,UACRV,IAAf,QCkBMe,EAAc,CAACL,aACNM,eAFE,SAAAV,GAAK,MAAK,CAAEW,KAAMX,EAAMW,QAIrCF,EAFWC,EA/BD,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMP,EAAT,EAASA,UAAT,OACZ,+BACE,+BACE,4BACE,kCACA,oCACA,sCACA,mCACA,wCAGJ,+BACGO,EAAKC,KAAI,SAAAN,GAAG,OACX,wBAAIO,IAAKP,EAAIC,IACX,4BAAKD,EAAIC,IACT,4BAAKD,EAAIV,MACT,4BAAKU,EAAIQ,QACT,4BACE,yBAAKC,IAAKT,EAAIU,IAAKC,IAAI,MAEzB,4BACE,4BAAQC,QAAS,kBAAId,EAAUE,EAAIC,MAAnC,oB,iBCsBNE,EAAc,CAACV,WACNW,cACX,KACAD,EAFWC,EA3CA,SAAC,GAAiB,IAAfX,EAAc,EAAdA,QACRoB,EAAc,SAAAC,GAClB,GAAIA,EAASC,IAAOD,EAASE,QAAU,KAAOF,EAASE,OAAS,IAC9D,OAAOF,EAEP,IAAIG,EAAQ,IAAIC,MAAMJ,EAASK,YAE/B,MADAF,EAAMH,SAAWA,EACXG,GAGJG,EAAY,SAAAN,GAChB,OAAOA,EAASO,QA0BlB,OACI,4BAAQT,QAzBC,WAEXU,IADY,4DACI,CACdC,OAAQ,QAEPC,KAAKX,GACLW,KAAKJ,GACLI,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GADA,IAGRpB,EADgBoB,EAAZG,QACWtB,KAAI,SAAAN,GACrB,MAAO,CACLC,GAAID,EAAIC,GAAG4B,MACXvC,KAAMU,EAAIV,KAAKwC,MAAQ,IAAM9B,EAAIV,KAAKyC,MAAQ,IAAM/B,EAAIV,KAAK0C,KAC7DxB,OAAQR,EAAIQ,OACZE,IAAKV,EAAIiC,QAAQC,UAGrBzC,EAAQY,MAET8B,OAAM,SAAAC,GACLV,QAAQC,IAAI,eAAgBS,QAI9B,Y,wCC7BFC,EAAUC,0BAAgB,CAC9BjC,SAMF,IAAMkC,EAAgB,CACpBhC,IAAK,OACLiC,aAEIC,EAAmBC,YAAeH,EAAeF,GACjDM,EAAQC,YAAe,CAC3BP,QAASI,EACTI,WAAW,GAAD,mBAAMC,eAXC,MAqBbC,EAAYC,YAAaL,GAC/BM,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,IAAD,CAAaQ,QAAW,KAAMJ,UAAaA,GACzC,mBAXM,kBACV,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SAQE,QAGJK,SAASC,eAAe,W","file":"static/js/main.cb6231a0.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst tableSlice = createSlice({\r\n    name: 'table',\r\n    initialState: [],\r\n    reducers: {\r\n        addRows(state, action){\r\n            return state.concat(action.payload)\r\n        },\r\n        deleteRow(state, action){\r\n            return state.filter(row => row.id !== action.payload)\r\n        }\r\n    }\r\n})\r\n\r\nexport const {addRows, deleteRow} = tableSlice.actions\r\nexport default tableSlice.reducer","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {deleteRow} from './tableSlice'\r\n\r\nconst Table = ({ rows, deleteRow }) => (\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>id</th>\r\n        <th>name</th>\r\n        <th>gender</th>\r\n        <th>pic</th>\r\n        <th>action</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {rows.map(row => (\r\n        <tr key={row.id}>\r\n          <td>{row.id}</td>\r\n          <td>{row.name}</td>\r\n          <td>{row.gender}</td>\r\n          <td>\r\n            <img src={row.pic} alt=\"\" />\r\n          </td>\r\n          <td>\r\n            <button onClick={()=>deleteRow(row.id)}>delete</button>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nconst mapState = state => ({ rows: state.rows });\r\nconst mapDispatch = {deleteRow}\r\nexport default connect(\r\n    mapState,\r\n    mapDispatch\r\n)(Table)","import React from 'react'\r\nimport crossfetch from \"cross-fetch\";\r\nimport {addRows} from './tableSlice'\r\nimport { connect } from 'react-redux';\r\n\r\nconst Button = ({ addRows }) => {\r\n    const checkStatus = response => {\r\n      if (response.ok || (response.status >= 200 && response.status < 300)) {\r\n        return response;\r\n      } else {\r\n        let error = new Error(response.statusText);\r\n        error.response = response;\r\n        throw error;\r\n      }\r\n    };\r\n    const parseJson = response => {\r\n      return response.json();\r\n    };\r\n    const load = () => {\r\n      const url = \"https://api.randomuser.me/?nat=us&gender=female&results=1\";\r\n      crossfetch(url, {\r\n        method: \"GET\"\r\n      })\r\n        .then(checkStatus)\r\n        .then(parseJson)\r\n        .then(body => {\r\n          console.log(body);\r\n          const { results } = body;\r\n          let rows = results.map(row => {\r\n            return {\r\n              id: row.id.value,\r\n              name: row.name.title + \" \" + row.name.first + \" \" + row.name.last,\r\n              gender: row.gender,\r\n              pic: row.picture.large\r\n            };\r\n          });\r\n          addRows(rows)\r\n        })\r\n        .catch(e => {\r\n          console.log(\"request fial\", e);\r\n        });\r\n    };\r\n    return (\r\n        <button onClick={load}>fetch</button>\r\n    )\r\n};\r\n\r\nconst mapDispatch = {addRows}\r\nexport default connect(\r\n    null,\r\n    mapDispatch\r\n)(Button)","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport {Provider} from 'react-redux'\r\nimport {combineReducers} from 'redux'\r\nimport {createLogger} from 'redux-logger'\r\nimport rows from './features/table/tableSlice'\r\nimport Table from './features/table/Table'\r\nimport Button from './features/table/Button'\r\nimport './main.css'\r\nimport {persistStore, persistReducer} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {PersistGate} from 'redux-persist/integration/react'\r\n\r\nconst reducer = combineReducers({\r\n  rows\r\n})\r\nconst middleware = []\r\nif(process.env.NODE_ENV !== 'production'){\r\n  middleware.push(createLogger())\r\n}\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, reducer)\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [...getDefaultMiddleware(), ...middleware]\r\n})\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Table/>\r\n    <Button />\r\n  </div>\r\n)\r\n\r\nconst persistor = persistStore(store)\r\nReactDom.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading = {null} persistor = {persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}